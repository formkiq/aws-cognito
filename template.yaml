AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: AWS Cognito 1.3.1

Globals:
  Function:
    Timeout: 15

Parameters:

  UserPoolName:
    Type: String
    Description: Name of the User Pool.
    AllowedPattern: ".+"

  AllowAdminCreateUserOnly:
    Default: "false"
    Type: String
    AllowedValues: ["true", "false"]

  PasswordMinimumLength:
    Type: Number
    Description: The minimum password length.
    MinValue: "6"
    MaxValue: "99"
    Default: "8"
    
  PasswordRequireLowercase:
    Description: Password requires at least one lowercase letter.
    Default: "true"
    Type: String
    AllowedValues: ["true", "false"]
    
  PasswordRequireNumbers:
    Description: Password requires at least one number.
    Default: "true"
    Type: String
    AllowedValues: ["true", "false"]
    
  PasswordRequireSymbols:
    Description: Password requires at least one symbol.
    Default: "true"
    Type: String
    AllowedValues: ["true", "false"]
    
  PasswordRequireUppercase:
    Description: Password requires at least one uppercase letter.
    Default: "true"
    Type: String
    AllowedValues: ["true", "false"] 

  Domain:
    Description: Amazon Cognito domain to use (include full domain if CertificateArn used)
    AllowedPattern: ".+"
    Type: String

  DomainCertificateArn:
    Description: Amazon Cognito Certificate ARN to use
    Type: String
    Default: ""

  ApiDomain:
    Description: Amazon API domain to use (include full domain if ApiDomainCertificateArn used)
    Type: String
    Default: ""

  ApiDomainCertificateArn:
    Description: Amazon API domain Certificate ARN to use
    Type: String
    Default: ""

  SesSourceArn:
    Type: String
    Description: The Amazon Resource Name (ARN) of a verified email address in Amazon SES
    Default: ""

  ReplyToEmailAddress:
    Type: String
    Description: The destination to which the receiver of the email should reply to
    Default: ""

  RedirectUrl:
    Type: String
    Description: The URL to redirect to from Cognito Signup
    AllowedPattern: ".+"

  HostedZone:
    Description: Amazon API domain Certificate ARN to use
    Type: String
    Description: Route53 Hosted Zone to create DNS records in - see https://console.aws.amazon.com/route53/v2/HostedZones
    Default: ""

  AccessTokenValidity:
    Description: The time limit, after which the access token is no longer valid and cannot be used.
    Type: Number
    Default: 24

  IdTokenValidity:
    Description: The time limit, after which the ID token is no longer valid and cannot be used.
    Type: Number
    Default: 24

Conditions:
  HasDomainCertificate: !Not [ !Equals [ !Ref DomainCertificateArn, "" ]]
  HasSesSourceArn: !Not [ !Equals [ !Ref SesSourceArn, "" ]]
  HasReplyToEmailAddress: !Not [ !Equals [ !Ref ReplyToEmailAddress, "" ]]
  HasNoDomainCertificate: !Equals [ !Ref DomainCertificateArn, "" ]
  ApiDomainCertificateArn: !Not [ !Equals [ !Ref ApiDomainCertificateArn, "" ]]
  HasNoApiDomainCertificateArn: !Equals [ !Ref ApiDomainCertificateArn, "" ]

Resources:

  HttpApiStage:
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      ApiId: !Ref HttpApi
      AutoDeploy: true
      Description: !Sub "${AWS::StackName}"
      StageName: "$default"
      DefaultRouteSettings:
        ThrottlingBurstLimit: 200
        ThrottlingRateLimit: 100
      Tags:
        StackName: !Sub "${AWS::StackName}" 

  HttpApi:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Body:
        openapi: "3.0.1"
        info:
          title: !Sub "${AWS::StackName} Cognito API"
          description: "Cognito HTTP API"
          version: "1.3.1"
        paths:
          /confirmRegistration:
            get:
              description: Confirm User Registration.
              tags:
              - Cognito
              responses:
                "301":
                  description: "301 response"
              x-amazon-apigateway-integration:
                $ref: "#/components/x-amazon-apigateway-integrations/lambdaApi301"          
          /confirmSignUp:
            get:
              description: Confirm User Signup.
              tags:
              - Cognito
              responses:
                "301":
                  description: "301 response"
              x-amazon-apigateway-integration:
                $ref: "#/components/x-amazon-apigateway-integrations/lambdaApi301"                
          /respondToAuthChallenge:
            post:
              description: Cognito Respond To Auth Challenge
              tags:
              - Cognito
              requestBody:
                required: true
                content:
                  application/json:
                    schema:
                      $ref: '#/components/schemas/CognitoRespondToAuthChallenge'
              responses:
                "200":
                  description: "200 response"
                  headers:
                    Access-Control-Allow-Origin:
                      schema:
                        type: "string"
                    Access-Control-Allow-Methods:
                      schema:
                        type: "string"
                    Access-Control-Allow-Headers:
                      schema:
                        type: "string"
              x-amazon-apigateway-integration:
                $ref: "#/components/x-amazon-apigateway-integrations/lambdaApi200"            
          /resetPassword:
            post:
              description: Confirm User Lost Password Signup.
              tags:
              - Cognito
              requestBody:
                required: true
                content:
                  application/json:
                    schema:
                      $ref: '#/components/schemas/CognitoLostPassword'              
              responses:
                "301":
                  description: "301 response"
              x-amazon-apigateway-integration:
                $ref: "#/components/x-amazon-apigateway-integrations/lambdaApi301"                
          /login:
            post:
              description: Cognito Login
              tags:
              - Cognito
              requestBody:
                required: true
                content:
                  application/json:
                    schema:
                      $ref: '#/components/schemas/CognitoLogin'
              responses:
                "200":
                  description: "200 response"
                  headers:
                    Access-Control-Allow-Origin:
                      schema:
                        type: "string"
                    Access-Control-Allow-Methods:
                      schema:
                        type: "string"
                    Access-Control-Allow-Headers:
                      schema:
                        type: "string"
              x-amazon-apigateway-integration:
                $ref: "#/components/x-amazon-apigateway-integrations/lambdaApi200"
          /refreshToken:
            post:
              description: Refresh Cognito Login
              tags:
              - Cognito
              requestBody:
                required: true
                content:
                  application/json:
                    schema:
                      $ref: '#/components/schemas/RefreshToken'
              responses:
                "200":
                  description: "200 response"
                  headers:
                    Access-Control-Allow-Origin:
                      schema:
                        type: "string"
                    Access-Control-Allow-Methods:
                      schema:
                        type: "string"
                    Access-Control-Allow-Headers:
                      schema:
                        type: "string"
              x-amazon-apigateway-integration:
                $ref: "#/components/x-amazon-apigateway-integrations/lambdaApi200"
          /register:
            post:
              description: Register Cognito User
              tags:
              - Cognito
              requestBody:
                required: true
                content:
                  application/json:
                    schema:
                      $ref: '#/components/schemas/CognitoRegisterUser'      
              responses:
                "200":
                  description: "200 response"
                  headers:
                    Access-Control-Allow-Origin:
                      schema:
                        type: "string"
                    Access-Control-Allow-Methods:
                      schema:
                        type: "string"
                    Access-Control-Allow-Headers:
                      schema:
                        type: "string"
              x-amazon-apigateway-integration:
                $ref: "#/components/x-amazon-apigateway-integrations/lambdaApi200"
          /forgotPassword:
            post:
              description: Lost Password
              tags:
              - Cognito
              requestBody:
                required: true
                content:
                  application/json:
                    schema:
                      $ref: '#/components/schemas/CognitoLostPasswordBody'      
              responses:
                "200":
                  description: "200 response"
                  headers:
                    Access-Control-Allow-Origin:
                      schema:
                        type: "string"
                    Access-Control-Allow-Methods:
                      schema:
                        type: "string"
                    Access-Control-Allow-Headers:
                      schema:
                        type: "string"
              x-amazon-apigateway-integration:
                $ref: "#/components/x-amazon-apigateway-integrations/lambdaApi200"
          /changePassword:
            post:
              description: Change Password
              tags:
              - Cognito
              requestBody:
                required: true
                content:
                  application/json:
                    schema:
                      $ref: '#/components/schemas/CognitoChangePassword'      
              responses:
                "200":
                  description: "200 response"
                  headers:
                    Access-Control-Allow-Origin:
                      schema:
                        type: "string"
                    Access-Control-Allow-Methods:
                      schema:
                        type: "string"
                    Access-Control-Allow-Headers:
                      schema:
                        type: "string"
              x-amazon-apigateway-integration:
                $ref: "#/components/x-amazon-apigateway-integrations/lambdaApi200"

        components:
          headers:
            AccessControlAllowOrigin:
              schema:
                type: string
            AccessControlAllowMethods:
              schema:
                type: string
            AccessControlAllowHeaders:
              schema:
                type: string
            Location:
              schema:
                type: string
          schemas:
            RefreshToken:
              required:
              - "refreshToken"
              type: "object"
              properties:
                refreshToken:
                  type: "string"
            CognitoLogin:
              required:
              - "username"
              - "password"
              type: "object"
              properties:
                username:
                  type: "string"
                password:
                  type: "string"
            CognitoRespondToAuthChallenge:
              required:
              - "username"
              - "password"
              - "session"
              - "userStatus"
              type: "object"
              properties:
                username:
                  type: "string"
                password:
                  type: "string"
                session:
                  type: "string"
                userStatus:
                  type: "string"
            CognitoChangePassword:
              required:
              - "accessToken"
              - "password"
              - "previousPassword"
              type: "object"
              properties:
                accessToken:
                  type: "string"
                password:
                  type: "string"  
                previousPassword:
                  type: "string"                
            CognitoLostPassword:
              required:
              - "username"
              type: "object"
              properties:
                username:
                  type: "string"    
            CognitoRegisterUser:
              required:
              - "username"
              - "password"
              type: "object"
              properties:
                username:
                  type: "string"
                password:
                  type: "string"
                createNewGroup:
                  type: "boolean"
            CognitoLostPasswordBody:
              required:
              - "username"
              - "password"
              - "code"
              - "clientId"
              type: "object"
              properties:
                username:
                  type: "string"
                password:
                  type: "string"
                code:
                  type: "string"
                clientId:
                  type: "string"
          x-amazon-apigateway-integrations:
            lambdaApi200:
              uri:
                Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${CognitoRequests.Arn}/invocations"
              responses:
                default:
                  statusCode: "200"
                  responseParameters:
                    method.response.header.Access-Control-Allow-Methods: "'*'"
                    method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
                    method.response.header.Access-Control-Allow-Origin: "'*'"
              passthroughBehavior: "when_no_templates"
              httpMethod: "POST"
              type: "aws_proxy"
              payloadFormatVersion: "1.0"  
            lambdaApi301:
              uri:
                Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${CognitoRequests.Arn}/invocations"
              responses:
                default:
                  statusCode: "301"
              passthroughBehavior: "when_no_templates"
              httpMethod: "POST"
              type: "aws_proxy"
              payloadFormatVersion: "1.0"
        x-amazon-apigateway-cors:
          allowOrigins:
          - "*"
          maxAge: 3600
          allowMethods:
          - "*"
          allowHeaders:
          - "*"

  HttpApiUrlParameter:
    Type: AWS::SSM::Parameter
    Condition: HasNoApiDomainCertificateArn
    DependsOn:
    - HttpApi
    Properties:
      Description: "The URL for the Cognito API endpoint"
      Type: String      
      Name: !Sub "/formkiq/cognito/${Domain}/CognitoHttpApiUrl"
      Value: !GetAtt HttpApi.ApiEndpoint
      Tags:
        StackName: !Sub "${AWS::StackName}"

  HttpApiUrlParameterCustomDomain:
    Type: AWS::SSM::Parameter
    Condition: ApiDomainCertificateArn
    DependsOn:
    - HttpApi
    Properties:
      Description: "The URL for the Cognito API endpoint"
      Type: String      
      Name: !Sub "/formkiq/cognito/${Domain}/CognitoHttpApiUrl"
      Value: !Sub "https://${ApiDomain}"
      Tags:
        StackName: !Sub "${AWS::StackName}"

  CognitoRequests:
    Type: AWS::Serverless::Function
    DependsOn: CognitoRequestsRole
    Properties:
      Description: A Lambda function that redirects Signup, handles register, lostpassword & login Requests.
      CodeUri: requests/
      Handler: app.lambdaHandler
      Runtime: nodejs14.x
      MemorySize: 256
      Timeout: 25
      Role: !GetAtt [CognitoRequestsRole, Arn]
      Environment:
        Variables:
          REGION: !Sub "${AWS::Region}"
          USER_POOL_ID: !Ref CognitoUserPool
          POOL_CLIENT_ID: !Ref CognitoUserPoolClient
          REDIRECT_URI: !Ref RedirectUrl
      Tags:
        StackName: !Sub "${AWS::StackName}"

  CognitoRequestsApiInvokePermission:
    Type: "AWS::Lambda::Permission"
    DependsOn:
    - HttpApi
    - CognitoRequests
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref CognitoRequests
      Principal: apigateway.amazonaws.com

  CognitoRequestsRole:
    Type: AWS::IAM::Role
    Properties:
      Tags:
        - Key: "StackName"
          Value: !Sub "${AWS::StackName}"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: /
      Policies:
        -
          PolicyName: apigatewaylambdarole
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Effect: Allow
              Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
              Resource: "*"
            - Effect: Allow
              Action:
              - cognito-idp:AdminCreateUser
              - cognito-idp:CreateGroup
              - cognito-idp:AdminAddUserToGroup
              Resource: !Sub 'arn:aws:cognito-idp:${AWS::Region}:${AWS::AccountId}:userpool/${CognitoUserPool}'

  CognitoUserPool:
    Type: AWS::Cognito::UserPool
    DependsOn:
    - CognitoCustomMessage
    Properties:
      AccountRecoverySetting:
        RecoveryMechanisms:
          - Name: verified_email
            Priority: 1
      UserPoolName: !Ref UserPoolName
      EmailConfiguration:
        EmailSendingAccount: !If [HasSesSourceArn, DEVELOPER, COGNITO_DEFAULT]
        From: !If [HasReplyToEmailAddress, !Ref ReplyToEmailAddress, !Ref AWS::NoValue]
        SourceArn: !If [HasSesSourceArn, !Ref SesSourceArn, !Ref AWS::NoValue]
        ReplyToEmailAddress: !If [HasReplyToEmailAddress, !Ref ReplyToEmailAddress, !Ref AWS::NoValue]
      VerificationMessageTemplate:
        DefaultEmailOption: CONFIRM_WITH_CODE
      UsernameAttributes:
        - email
      AutoVerifiedAttributes:
        - email        
      MfaConfiguration: "OFF"
      UsernameConfiguration:
        CaseSensitive: false
      AdminCreateUserConfig:
        AllowAdminCreateUserOnly: !Sub "${AllowAdminCreateUserOnly}"
      LambdaConfig:
        CustomMessage: !GetAtt CognitoCustomMessage.Arn        
      Policies:
        PasswordPolicy:
          MinimumLength: !Sub "${PasswordMinimumLength}"
          RequireLowercase: !Sub "${PasswordRequireLowercase}"
          RequireNumbers: !Sub "${PasswordRequireNumbers}"
          RequireSymbols: !Sub "${PasswordRequireSymbols}"
          RequireUppercase: !Sub "${PasswordRequireUppercase}"
      Schema:
        - Name: email
          AttributeDataType: String
          Mutable: false
          Required: true
      UserPoolTags:
        StackName: !Sub "${AWS::StackName}"

  CognitoUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId: !Ref CognitoUserPool
      PreventUserExistenceErrors: ENABLED
      AccessTokenValidity: !Ref AccessTokenValidity
      IdTokenValidity: !Ref IdTokenValidity
      ExplicitAuthFlows:
        - ALLOW_USER_PASSWORD_AUTH
        - ALLOW_REFRESH_TOKEN_AUTH
        - ALLOW_ADMIN_USER_PASSWORD_AUTH
        - ALLOW_USER_SRP_AUTH

  CognitoCustomMessage:  
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: custom_message/
      Handler: app.lambdaHandler
      Runtime: nodejs14.x
      Role: !GetAtt CognitoCustomMessageRole.Arn
      Environment:
        Variables:
          REDIRECT_URI: !Ref RedirectUrl
          DOMAIN: !Ref Domain
          S3_BUCKET: !Ref CognitoConfig
      Tags:
        StackName: !Sub "${AWS::StackName}"

  CognitoConfig:
    Type: AWS::S3::Bucket
    Properties:
      BucketEncryption: 
        ServerSideEncryptionConfiguration: 
        - ServerSideEncryptionByDefault:
            SSEAlgorithm: AES256
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        IgnorePublicAcls: true
        BlockPublicPolicy: true
        RestrictPublicBuckets: true
      Tags:
        - Key: "StackName"
          Value: !Sub "${AWS::StackName}"

  CognitoCustomMessagePermission:
    Type: AWS::Lambda::Permission
    DependsOn:
    - CognitoCustomMessage
    - CognitoUserPool
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref CognitoCustomMessage
      Principal: cognito-idp.amazonaws.com
      SourceArn: !GetAtt CognitoUserPool.Arn

  CognitoCustomMessageRole:
    Type: AWS::IAM::Role
    Properties:
      Tags:
        - Key: "StackName"
          Value: !Sub "${AWS::StackName}"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
      Policies:
      - PolicyName: !Sub "${AWS::StackName}-CognitoCustomMessageRole"
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - logs:*
            Resource: arn:aws:logs:*:*:*
          - Effect: Allow
            Action:
            - ssm:GetParameters
            Resource: 
            - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/formkiq/cognito/*"
          - Effect: Allow
            Action:
            - s3:GetObject
            Resource:
            - !Sub "arn:aws:s3:::${CognitoConfig}/*"

  UserPoolDomainCustom: 
    Type: AWS::Cognito::UserPoolDomain 
    DependsOn:
    - CognitoUserPool
    Condition: HasDomainCertificate
    Properties:
      UserPoolId: !Ref CognitoUserPool 
      Domain: !Ref Domain
      CustomDomainConfig:
        CertificateArn: !Ref DomainCertificateArn

  UserPoolDomain: 
    Type: AWS::Cognito::UserPoolDomain 
    DependsOn:
    - CognitoUserPool
    Condition: HasNoDomainCertificate
    Properties:
      UserPoolId: !Ref CognitoUserPool
      Domain: !Ref Domain

  CognitoIdentityPool:
    Type: AWS::Cognito::IdentityPool
    Properties:
      IdentityPoolName: !Sub "${AWS::StackName}-identity-pool"
      CognitoIdentityProviders: 
        -
          ClientId: !Ref CognitoUserPoolClient
          ProviderName: !GetAtt CognitoUserPool.ProviderName
      AllowUnauthenticatedIdentities: false

  ApiDomainName:
    Type: AWS::ApiGatewayV2::DomainName
    Condition: ApiDomainCertificateArn
    Properties: 
      DomainName: !Ref ApiDomain
      DomainNameConfigurations:
      - CertificateArn: !Ref ApiDomainCertificateArn
      Tags:
        StackName: !Sub "${AWS::StackName}"

  ApiDomainMapping:
    Type: AWS::ApiGatewayV2::ApiMapping
    Condition: ApiDomainCertificateArn
    DependsOn:
    - HttpApiStage
    - HttpApi
    - ApiRoute53
    Properties:
      ApiId: !Ref HttpApi
      DomainName: !Ref ApiDomain
      Stage: "$default"

  ApiRoute53:
    Type: AWS::Route53::RecordSet
    Condition: ApiDomainCertificateArn
    Properties:
      Name: !Ref ApiDomain
      HostedZoneName: !Ref HostedZone
      Type: A
      AliasTarget:
        HostedZoneId: !GetAtt ApiDomainName.RegionalHostedZoneId
        DNSName: !GetAtt ApiDomainName.RegionalDomainName

Outputs:
  ApiEndpoint:
    Description: The Cognito Login API endpoint
    Value: !If [ApiDomainCertificateArn, !Sub "https://${ApiDomain}", !GetAtt HttpApi.ApiEndpoint]
  CognitoUserPoolId:
    Description: The Cognito User Pool Id
    Value: !Ref CognitoUserPool
  CognitoUserPoolProviderName:
    Description: The Cognito User Pool Provider Name
    Value: !GetAtt CognitoUserPool.ProviderName
  CognitoUserPoolProviderURL:
    Description: The Cognito User Pool Provider URL
    Value: !GetAtt CognitoUserPool.ProviderURL
  CognitoUserPoolArn:
    Description: The Cognito User Pool Arn
    Value: !GetAtt CognitoUserPool.Arn
  CognitoUserPoolClientId:
    Description: The Cognito User Pool Client Id
    Value: !Ref CognitoUserPoolClient
  CognitoIdentityPoolId:
    Description: Cognito Identity Pool
    Value: !Ref CognitoIdentityPool
  Domain:
    Description: Amazon Cognito domain to use (include full domain if CertificateArn used)
    Value: !Ref Domain
